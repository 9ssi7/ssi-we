function ssiWeInit() { void 0 === window.ssiWe && (window.ssiWe = { url: "localhost:8080", page: "home", params: {}, user: {} }), run() } const validateParams = e => !!e && "object" == typeof e && e.url && e.page, mergeObjects = (e, t) => Object.assign({}, e, t), warn = (e, t) => { e && console.warn(t) }, run = () => { if (!validateParams(window.ssiWe)) return void console.error("ssi-we: Invalid params"); const e = (t = { reconnectDelay: 1e3, reconnectAttempts: 5, reconnect: !0, openEvent: !1, debug: !1 }, n = window.ssiWe, Object.assign({}, t, n)); var t, n; let s = new WebSocket(`ws://${window.ssiWe.url}/ws`), a = !1; const o = (e, t) => { a && e.send(JSON.stringify(t)) }, r = () => { e.reconnect && setTimeout((() => { s = new WebSocket(`ws://${window.ssiWe.url}/ws`) }), e.reconnectDelay) }, i = t => { t.send("Hello Server!"), document.querySelectorAll("[data-we-event]").forEach((e => { const t = e.getAttribute("data-we-event") || "click"; e.removeEventListener(t, (() => { })) })), (t => { document.querySelectorAll("[data-we-event]").forEach((n => { const s = n.getAttribute("data-we-event") || "click", a = n.getAttribute("data-we-name"); if (!a) return r = e.debug, i = "ssi-we: Element without name property. In the element: " + n.tagName.toLowerCase(), void (r && console.warn(i)); var r, i; n.addEventListener(s, (e => { const s = window.ssiWe?.params || {}; n.getAttributeNames().filter((e => e.startsWith("data-we-params-"))).forEach((e => { const t = e.replace("data-we-params-", ""); s[t] = n.getAttribute(e) })), o(t, { page: window.ssiWe.page, type: e.type, name: a, element: n.tagName.toLowerCase(), params: Object.keys(s).length > 0 ? s : void 0, user: window.ssiWe?.user }) })) })) })(t) }; s.onopen = () => { a = !0, e.openEvent && o(s, { page: window.ssiWe.page, type: "open", name: "open", element: "window", params: window.ssiWe?.params, user: window.ssiWe?.user }), i(s) }, s.onclose = () => { a = !1, r() }, s.onerror = () => { a = !1, r() } }; ssiWeInit();